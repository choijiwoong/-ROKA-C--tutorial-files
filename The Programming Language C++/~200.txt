	[C++ 둘러보기: 추상화 메커니즘]
6.	객체 반환 시 Based클래스 혹은 인터페이스 등으로 받을 시 그 반환값을 사용하는 user입장에서는 제대로 된 delete(파생클래스 추가할당가능성)를 수행하지 못할 수도 있다. 즉 user에서 직접 real type을 확인하여 따로 delete처리를 해야한다.
8.	이동 생성자와 이동 대입에서 중요한 것은 그것의 인자로부터 값을 제거하는 것이다.(정말 이동이라는 말임)
9.	클래스 계층 구조 내에서 이동과 복사를 사용하게 되면 기반 클래스의 포인터의 경우 파생 클래스가 어떤 멤버를 갖고 있는지 모르기에 복사하는 방법등을 알 수 없다. 고로 복사&이동연산을 delete하거나 clone을 작성하자.
12.	함수객체(정적 객체_policy object)는 inline화에 용이하다.
13.	람다 표현식에서의 capture list는 [&x], [=x], [], [&], [=]등 여러 간편한 캡쳐가 가능하다.

	[4. C++ 둘러보기: 컨테이너와 알고리즘]
1.	C++의 가비지 컬렉터는 명시적으로 설치되고 활성화되지 않으면 실행되지 않는다. 이를 사용하기 위해 ABI(Application Binary Interface)를 제공한다: declare_reachable(접근가능하니까 collect하지마), declare_no_pointers(여긴 포인터 보관 안해)(feat. traceable)
3.	출력(cout)의 기본 설정상 공백문자는 읽기를 종료시키는데 반해 getline()함수를 이용하면 \n을 기준으로 읽어들일 수 있다.
4.	입력스트림오버로딩 시 format을 정확히 체크하고 parsing한 뒤 format과 다른 값이 입력되었을때는 setstate()를 이용하여 실패를 설정한 뒤 스트림을 리턴한다. if condition안에서 >>으로 넣는 것도 좋은 방법이다. ex) is>>number>>c(is값을 number에, 다음 is값을 c에)
5.	표준 라이브러리 Vector는 범위체크를 보장하지 않기에 []연산자를 .at을 사용하게끔 오버로딩하여 사용하면 편리하다. 맵과 같은 다른 자료구조도 마찬가지다.
6.	unordered_map(중복이 가능한 것일 뿐 균형이진트리 정렬되어있음)같은 경우 hashed lookup을 이용하기에 탐색이 빠르다. 순서없는 컨테이너는 하나의 키를 이용한 검색에 최적화되어 있다.
7.	unique_copy(vec.begin(), vec.end(), back_inserter(res))를 통해 동일한 개수를 갖지않는 두 컨테이너를 copy할 수 있다. back_inserter()는 삽입 반복자로 그 외에 inserter(), front_inserter()이 있다.
11.	굉장히 특이한 코드
	set<string> b{istream_iterator<string>{is}, istream_iterator<string>{});//입력을 읽어들여_range constructor
	copy(b.begin(), b.end(), ostream_iterator<string>{os, "\n"};//출력에 복사한다.
12.	알고리즘은 특정한 문제의 집합을 해결하기 위해 순서대로 연산을 제공하는 한정된 규칙 집합으로서 한정성(Finiteness), 명확성(Definiteness), 입력(Input), 출력(Output), 유효성(Effectiveness) 총 5가지의 중요한 특성을 가지고 있다.

	[5. C++ 둘러보기: 병행성과 유틸리티]
2.	threads, mutex, lock, packaged_task, futures들은 운영체제가 제공하는 기능을 기반으로 구축되어 있기 때문에 다른 것들에 비해 성능저하를 유발하지 않는다.
3.	병행해서 수행될 수 있는 계산을 태스크(task_주로 callable)라고 부르며 thread는 프로그램에 들어있는 태스크를 시스템 수준으로 표현한 것이다. 한 프로그램의 스레드는 단일 주소공간을 공유한다 unlike 프로세스. 서로 통신해야하는 경우를 제외하고는 태스크를 독립적으로 분리시켜야 한다(feat. 병행태스크)
4.	dead lock교착상태를 막는 간단한 방법으로 한번에 lock을 획득하는 방법이 있다.
6.	async()는 thread launcher로 std::future<void> a = std::async(std::launch::async, for_print, 'a')처럼 사용한다. for_print('a')를 실행. promise-future보다 저수준
9.	Iterator_traits는 어떤 종류의 반복자가 지원되는지 체크할 수 있게 해준다. random_access_iterator_tag, forward_iterator_tag on sort_helper(this way is called as tag dispatch), Value_type, Iterator_category<Iter>
	using Iter=Iterator_type<C>;
	sort_helper(c.begin(), c.end(), Iterator_category<Iter>{});

	[6. 타입과 선언]
1.	운영체제의 지원을 받은 구현 환경에서는 모든 표준 라이브러리 기능이 포함되지만, 자립적 구현 헤더(cstddef, cstdlib, new, typeinfo, type_traits)는 최소한의 운영체제 지원만으로 실행되게 한것으로 하드웨어와 밀접한 프로그램을 위한 예외시 사용할 비표준적인 옵션을 제공한다.
2.	산술타입(feat. wchar_t, char16_t, char32_t), 기본 제공 타입(포인터, 배열, 레퍼런스), 사용자 정의 타입
4.	어떤 타입을 unsigned로 바꾸어 효율성을 높이려는 사고는 암시적 변환 규칙에 의해 대부분 깨진다.
5.	통합 정수 리터럴에서 접미사들의 조합이 허용되기에 0LU는 unsigned long이다. 접미사는 32비트 컴퓨터와 16비트 컴퓨터에서의 타입을 통일하기 위해 사용한다.
7*	alignof()는 인자타입의 정렬을 반환하며 T와 똑같이 정렬하라는 것을 의미하기 위해 alignas(T)로도 사용한다. X를 위해 초기화되지 않은 저장공간을 준비하는 예시는 아래와 같다.
	void user(const vector<X>& vx){
		constexpr int bufmax=1024;
		aligas(X) char buffer[bufmax];//uninitialized. Z is some type. 이 배열은 X의 정렬을 따릅니다(크기)
		const int max=min(vx.size(), bufmax/sizeof(X));//적재 최대값을 구한 뒤
		unitialized_copy(vx.begin(), vx.begin()+max, reinterpret_cast<X*>(buffer));//초기화되지 않은 buffer에 vx를 iterator사용 복사하는데 그 단위는 X*로 저장한다.
		//...
	}
9.	선언은 크게 specifier(static, virtual), base type(const int, vector<double>), declarator(p[7]), initializer({retunr x;}, ={7,5,3}), 선택적 접미사 함수 지정자(const, noexcept)로 나뉜다.