	[클래스]
1.	클래스에서 모든 오류는 반드시 맴버 함수 내에서 일어나기에 디버깅의 첫 단계; localization이 이미 완성된다. (참고로 멤버 함수는 인라인 멤버 함수로 간주된다)
2.	비공개(private) 데이터는 주소조작(포인터에 산술연산), 명시적 타입 변환으로 뚫을 수 있다.
8.	member(nested) class는 자신이 소속된 클래스의 static멤버를 참조할 수 있는데, 포함된 클래스의 non-static에 접근하려면 포함된 클래스의 참조자로 가능하다.
10.	concrete type은 value type이라고도 불리우며 이것들을 사용하는 방식을 value-oriented programming이라고 부른다. 이들은 polymorphism을 표시하기엔 적합하지 않다. 이들의 크기는 컴파일 타임에 알려지며 연산의 인라인화도 달성된다.

	[생성, 마무리, 복사와 이동]
2.	virtual 기반클래스는 기반 클래스 중 가장 먼저 생성되며 모두 소멸된 후에 소멸된다. 이러한 규칙을 위해 Derived 클래스의 생성자&소멸자 순서가 존재한다. (ex. Based에는 A->B생성, Derived에선 B->A생성. Destructor에서는 A->B? B->A?)
4.	생성자가 요구하는 적절한 초기화 식을 만족하지 않고 객체를 생성하는 것은 잘못된 것이지만 객체는 복사될 수 있다는 가정 때문에 copy constructor로 뚫을 수 있다.
5.	중요한 것은 default constructor을 사용한다는 것은 default initialization을 허용한다는 것이다. 생성자 선택에 대해서는 기본생성자->초기화식 리스트->etc 순으로 우선권을 갖는다.
7.	initializer_list를 사용하여 constructor arguments를 초기화하는 경우에 해당 순서대로 초기화되는 것이 아닌, 정의된 순서대로 초기화된다. 아래는 예시이다.
	class B1{ B1(); }	class B2{ B2(int); }	struct D1: B1,B2{ D1(int i):B1{}, B2{i}{} };	struct D1:B1, B2{ D1(int i){} };//여기에서 D1의 생성자를 따라 B2가 i로 초기화 될 것 같지만, initializer_list에서 정의된 순서로 들어가기에 int i가 B1로 들어가서 B2에서 int인자가 없다는 오류를 출력한다.
9.	delegate constructor(forwarding function)은 기존의 생성자를 다른 생성자(오버로딩이라던가)에서 이용하는 것을 의미한다.
11.	생성자의 initializer_list사용 없이 클래스 선언 안에서 바로 non-static 데이터 멤버에 대한 초기화 식을 지정할 수 있는데(int a=3;)이는 다중 생성자를 가진 클래스에서 위력을 발휘한다.
12.	static 멤버의 선언은 static, 초기화는 const static을 사용한다. static은 constexpr이어야 한다.
13.	이동은 유효하지 않은 객체를 소멸시킬 수 없기에 예외를 던질 수 없는 반면, 복사는 던질 수 있다. operator=오버로딩에서 복사 예외를 막고싶다면 사본을 만든 후 swap을 하는 방법이 유익하다. 대입을 이동으로 보는 것도 유용하다.
14.	복사는 equivalence(x=y후 x와 y과 동일한 결과 산출), independence(x연산은 y상태변경 불가)를 만족해야한다. 복사대입은 자가대입에도 안전해야한다.
15.	rep=shared_ptr<Representation>{clone()};로 복사생성자 시 인자를 보호할 수 있으며, 불변하는 공유상태 ptr에서는 copy_on_wirte디자인을 고려할 수 있다.
16.	이동연산을 사용할 수 없다면 Matric& res=*new Matrix; ... return res로 아예 반환을 자유저장공간을 가리키는 reference로 해버리는 편법도 있다. p.572
18. delete를 이용하여 함수 템플릿의 특수화 집합에서 특수화를 삭제할 수 있다. template<typename T> T* clone(T* p){ return new T{*p}; }; 	Foo* clone(Foo*)=delete; 아래는 또다른 delete의 사용이다.
	class Not_on_stack{ ~Not_on_stack()=delete; }//소멸될 수 없는 지역 변수는 가질 수 없다.
	class Not_on_free_store{ void* operator new(size_t)=delete; }//new 금지
	void f(){
		Not_on_stack v1;//ERROR cannot remove
		Not_on_free_store v2;//OK just declaration
		
		Not_on_stack* p1=new Not_on_stack;//OK nullptr
		Not_on_free_store* p2=new Not_on_free_store;//ERROR cannot allocate
	}
	
	[연산자 오버로딩]
1.	operator T()는 타입 T로의 변환을 정의한다. x@y에서는 operator&을 x,y순으로 찾고 없으면 x,y의 네임스페이스 순으로 operatoe@의 선언을 찾는다. 다만 X::make_int()같은 함수로 초기부터 변환처리를 하는 것이 바람직하다.