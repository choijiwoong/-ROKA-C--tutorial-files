	[특수화]
1.	가장 특수화된 버전이 다른 버전에 디해 우선선택되며, C++은 함수에 대한 완전한 특수화만 지원하기에 부분적 특수화를 할 만한 경우에 오버로딩을 사용한다. 오버로딩과 특수화는 다른데, 아무 인자도 받아들이지 않는 template함수주에 선택하는데에 함수 특수화를 사용할 수 있다. 오버로딩이었다면 dummy인자가 필요했을 것이다.

	[인스턴스화]
1.	생성된 specialization과 프로그래머에 의해 명시적으로 작성된 specialization을 구분해야할 때는 각각 generated specialication, explicit specialization(user specialization)이라고 부른다.
2.	클래스 템플릿의 인스턴스화는 그것의 모든 멤버함수의 인스턴스화를 의미하진 않는다. 즉, 연산이 필요한 List<string>::sort()는 인스턴스화 되지만, 아직 연산이 안된 List<Glob>::sort()는 인스턴스화되지 않는다
3.	인스턴스화의 수동제어의 목적은 중복되는 인스턴스화를 제거하거나, 문제를 제거하기 위해 어떤 인스턴스화 시점이 사용되는지 정확히 알아내는 것이다. 이때 사용되는 명시적 인스턴스화 요청은 template키워드(<>없이)가 접두사로 붙은 특수화 완전한 선언이다. template class vector<int>; 이때 모든 멤버함수를 인스턴스화한다.
4.	컴파일러는 개별적인 컴파일 단위에서 다중 인스턴스화를 진단하지 않기에 다중 인스턴스화(template+완전한선언문)는 피해야한다. 이를 보완하기 위해 extern template을 사용하는 추세이며 하나의 특수화에 대해 하나의 명시적 인스턴스화를 만들고 다른 해석단위에서 쓰기 위한 것이다.
5.	name binding은 템플릿 내에서 명시적,암시적으로 사용된 각각의 이름에 대한 선언을 '템플릿 정의의 상황정보', '인자 타입 선언의 상황 정보', '템플릿 사용의 상황정보'를 기반으로 찾는 과정이라고 한다(사용하기위해). 템플릿 매개변수에 대한 성향에 따라 dependent name(인스턴스화시점에 바인딩), nondependent name(템플릿 정의 시점에 바인딩)으로 구분한다.
6.	dependent name은 실제인자타입이 타입추론규칙에 의해 T에 의존하거나, 호출된 함수가 타입추론규칙에 의해 T에 의존하는 매개변수를 가지면 의존적인 이름으로 구분한다. 기본적으로 외존적인 이름은 타입이 아닌 뭔가에 이름을 붙이는 것으로 가정되기에 의존적이름을 타입으로 사용하려면 typename을 명시적으로 사용해야한다.
7.	타입에 이름을 붙이는 것으로 가정된다는 것을 명시적으로 기술하기 위해 typename을 사용하는 경우와 비교시 어떤 이름이 템플릿에 이름을 붙이는 것으로 가정된다고 명시적으로 기술하기 위해 template을 사용하는 경우는 매우 드물다. 그냥 typename은 한정 이름앞에 등장하고, template은 템플릿 이름 앞에 등장한다.
8.	정의시점바인딩 즉, 템플릿 인자에 의존하지 않는 이름은 템플릿에 존재하지 않는 이름과 똑같이 취급되기에 정의가 템플릿정의보다 늦으면 고려를 안하며, 인스턴스화시점바인딩은 재귀적 호출을 가능하게 하기위해 함수템플릿 인스턴스화 선언 이후에 등장해야하며, 템플릿 정의에 쓰이는 한정되지 않은 이름은 지역 이름에 절대로 바인딩될 수 없다.
	템플릿 클래스나 클래스 멤버에 대해서는 인스턴스화 시점이 그것의 사용부분이 포함된 선언 바로 앞이어야 한다. name binding.cpp의 instaintiation_binding namespace의 3번째 예시를 참고하자. 의존성을 명시적으로 만들기 위해 템플릿 인자에 의존하는 것은 템플릿 코드에 대해 단순하게 생각할 수 있게 해주고, 심지어 지역 정보에까지 접근할 수 있게 해준다.
	템플릿 내에서 지역이름을 정의에 사용하지 않는 것이 모호성측면에서 좋지만, 그렇다고 해서 무리하게 std까지 따로 template argument로 정의할 필요는 없다. name binding.cpp의 ambigous namespace확인.
9.	특수화 생성 전략 3가지 '호출을 발견하는 최초 시점에 특수화생성', '해석단위의 끝에서 필요한 모든 특수화생성', '프로그램의 모든 해석 단위를 발견하고 필요한 모든 특수화생성'을 기반으로 템플릿 특수화는 '임의의 인스턴스화 시점', '해석단위내 인스턴스화 시점에 이어지는 임의의 시점', '특수화 생성을 위해 특별히 만들어진 해석 단위 안에서의 시점'에서 이루어진다.
	다만 인스턴스화시점을 다르게 했다고 의미가 달라져버리면 문제 있다. 고로 이러한 문제를 피하기 위해 템플릿에서 상황 의존성을 제한하려고 노력해야한다.
10.	템플릿도 Argument Dependent Lookup(ADL)이 적용되는데, 지나치게 공격적인 ADL은 얼추 맞는걸 찾으니 반환타입이 달라 오류를 내는 둥 좋지 않다. 이러한 경우 콘셉트를 이용하여 많은 문제를 해결할 수 있다. SFINAE 치환오류는 오버로딩우선순위상에서 제외.
	만약 함수 오버로딩에서 함수의 특정 버전이 고려되도록 보장하고 싶다면 using선언을 통해 현재의 scope에 추가할 수 있다. ex) using std::begin; using std::end;
11.	기반클래스가 템플릿 인자에 의존적이지 않으면 상관이 없는데 만약 의존적: public T이라면 조금 위험하다. 지역이름은 다른 범위의 이름을 가리기때문에 template argument가 들어오기 전에 다른 지역 혹은 전역 함수,객체등이 있다면 template argument를 신경쓰지 않고 바로 컴파일타임에 결정해버릴 수도 있다.
	이를 막기 위해선 의존성 명시를 해야하는데, 직접 ::을 사용하여 명시하거나, this->를 사용하여 전역함수가 call안되게 하거나, using T::~로 원하는 것을 유효범위로 가져오는 방법들이 있다.
	
	[템플릿과 계층 구조]
1.	polymorphism을 위해 template class나 Based class가 사용되며 가상함수를 통해 run-time polymorphism, 템플릿을 통해 compile-time(parametric) polymorphism을 제공한다. 템플릿(also called as type generator)은 특수화로, virtual은 인터페이스로 비슷한 polmorphism구현이 가능하지만 둘의 차이는 아래와 같다.
	인터페이스의 타입이 다르다(서로 다른 인터페이스를 이용하려면 casting이 필요), 매개변수와같이 일부 특수한 경우에만 클래스구현이 다르다, 인라인화가 필수일정도로 효율이 중요하다: 템플릿 / 실제타입이 컴파일타임에 알수없다, 계층구조가 필요하면 (템플릿특수화사이변환은 explicit casting이 필요하기에): 계층구조
2.	논리상으로 const set<cosnt Circle*>을 const set<const Shape*>로의 변환은 제공한다. 배열과 기반클래스의 조합은 컨테이너의 타입안전성을 제공하지 않는데, Circle[]에서 Circle*로 decay되고, Circle*이 Shape*로 변환되었을 때 C규칙 두가지, 배열이름은 첫원소포인터암시적변환, up-casting이 조합된다면 변환된 포인터를 기준으로 타입크기를 추정하여 다음 호출p[1]에 대해 실패할 것이다.
	고로 가급적 컨테이너를 선택해야하며 void f(T* p, int count)나 런타임 다형적이어야할 뭔가에 .이 있다면 의심해봐야 한다.
3.	동일한 클래스에서생성된 클래스들 사이에서 기본적이지 않은 관계를 위해 operator 형변환함수(애초에 그냥 이름있는 casting함수를 만들어...)를 정의한다면, enable_if를 제외하고 아래와 같은 방법이 있다. 다만 주의할 점은 템플릿 매개변수 리스트와 그것의 템플릿 멤버 중 하나는 서로 조합될 수 없다는 것이다. not use template<typename T, typename T2> on next example.
	template<typename T>
		template<typename T2>
			Ptr<T>::operator Ptr<T2>(){ return Ptr<T2>{p}; }//Ptr<T2>가 반환타입인 Ptr<T>로 반환되어야 작동. 즉, T2*가 T*에 대입될 수 있는 경우에 변환을 받아들이게 한다.
4.	template<typename T> class Vector<T*>: private Vector<void*> {}와 같은 구조는 타입 안전적인 인터페이스를 제공하는데 쓰일 수있으며, 구현 시 casting지역화에 유용하다.
5.	데이터 구조의 구성 예시로 레드블랙트리 구현을 생각해보자. data를 파생클래스에 넣고 가상함수를 이용하여 접근이 가능하지만 비용이 들며 캐스팅이 필요하다. void*를 노드에 넣고 바깥 데이터를 참조하게 하면 할당개수를2배로 늘리는 중 공간오버헤드가 증가되며 캐스팅이 필요하다(타입체크되지않는), 데이터를 노드에 넣을 수 있지만 비용과 불편함이 동시에 문제가 된다.
	해결로는 파생클래스 Node<Val>를 기반클래스 Node_base의 템플릿 인자로 전달하여 자신의 인터페이스Node_base에서 Node<Val>를 사용하게 하거나, Node가 균형자 타입으로 값 타입을 조합하게 할 수 있다. 아니면 Balance를 기반클래스로 사용하지 않고 멤버를 정의하는데 사용하는 방법도 있지만, 일부 균형자는 노드당 데이터를 필요로 하지 않기에
	Balance를 기반클래스로 만들면 empty base optimization(빈 기반 클래스 최적화)로 인한 혜택을 누릴 수 있다. C++에서 기반클래스가 non-static데이터 멤버를 갖지 않은 경우 파생 클래스에서 메모리가 할당되지 않게 보장해주기 때문이며, 이러한 설계는 이진트리 프레임워크와 유사하다.
	대부분 저수준(C 스타일)프로그래밍 기법의 void*는 값 타입 기반의 최적화를 무력화하기에 상당한 런타임 비용을 수반한다. 다른 대안으로 균형자를 연관타입의 형태로 암시적인 인자로 만들 수 있으며, 이를 Barton-Nackman trick혹은 curiously recurring template pattern이라고 한다.(이부분은 좀 어렴네..p.838)
5-1.어렵기에 대충 한번 다시보며 요약하며, red black tree을 설계할때 균형을 위해 balancer가 필요한데 그냥 멤버로서 넣는방법은 다른소스정보조합에 관한 근본적 질문을 회피하는 것이며, Node가 균형자 타입을 상속받아 값타입을 조합하게 하는 것은 empty base optimization관점에서 좋지만 이때 사용되는 void*의 활용(저수준 C스타일 프로그래밍)은
	값타입 기반의 최적화 기법을 무력화하기에 런타임 비용을 수반한다. 고로 균형자를 개별적인 template argument로 전달하는 방법을 다음 방법으로 고려해볼 수 있는데, 이는 혼란(복잡)스럽다. 고로 균형자를 연관타입의 형태로 암시적인 인자로 만드는 방법(Barton-Nackman trick, curiously recurring template pattern) 사용한다.
	(또한 대충 찾아보니 현재의 C++은 바톤 네크먼 기법이 필요없게 지원해준다고함..)
6.	클래스 계층 구조의 선형화는 템플릿 인자를 기반클래스로 집중적으로 활용하는 IPR(Internal Program Representation_내부 프로그램 표현)에 의존한다. 최초의 계층구조의 효율적인 구현 시도는 고전적인 다이아몬드 계층구조였는데 이는 과도한 메모리 오버헤드가 있었기에 이중 계층 구조를 선형화하여 가상기반클래스가 사용되지 않게 하였다.
	이러한 방법에서 사용자가 알게될 사실은 IPR그래프의 모든노드는 Node타입의 고유 기반 클래스를 갖으며, visitor pattern을 이용하여 연산을 구현하는데에 쓰인다는 것이다. IPR의 목적은 C++의 비정규성과 한계를 전부 구현하지 않고 C++의 전부를 표현하겠다는 것이다. 이러한 선형화는 매우 혼란스럽지만 장점인 타입 안전성, 코드크기의 최소화가 너무 확실하다. 또한 hierarchy와 virtual의 장점인 확장성또한 약화되지 않는다.
	
	[메타 프로그래밍] 인스턴스화가 실패하면 템플릿 구현의 복잡성이 사용자에게 보인다는 것을 명심하고.. using을 이용하던..캡슐화에 시도해보자.
1.	프로그램 개체(템플릿, 함수 등)을 조작하는 프로그래밍을 일반적으로 metaprogramming(for 타입안전성, 런타임 성능 개선, 인라인화 기회 증가)이라고 하며, 컴파일타임에 계산을 응용하여 프로그램을 생성하는 것이 two-level programming, multilevel programming, template metaprogramming이라고 부른다.
2.	구현의 복잡성은 다음과 같이 크게 4가지. 계산이없음, 컴파일타임검사나 반복을 이용하지 않는 간단한 계산, 명시적 컴파일 타입 검사 이용 계산, 컴파일 타임 반복을 이용하는 계산(재귀)로 나뉜다. 일반화 프로그래밍과 메타프로그래밍은 구분되는데, 일반화는 인터페이스 명세에 초점을 맞추는 반면, 메타프로그래밍은 대개 값(::value)으로서 타입을 가진다.
3.	std::condition<predicate, if_true, if_false>는 컴파일타임 삼항연산자같은 기능이다.
4.	별칭을 통해 구현세부사항을 은닉하거나 가독성을 높일 수 있지만, 유효하지 않은 타입이 될 가능성이 있다면 ::type처럼 별칭을 사용하지 않아야 한다. ::type처럼 사용하면 어디가 오류인지를 알 수 있는 반면 using 별칭을 사용하다 오류가 발생하면 실제 오류가 아닌 타입별칭을 잘못 붙였다는 오류를 출력하여 가려질 수있기 때문이다.
	혹은 Delay타입함수로 타입함수가 사용될 때까지 타입의 평가를 미룰 수도 있다. Conditional<is_integral<T>::value, Delay<Make_unsigned, T>, Error> 		template<template<typename...> class F, typename... Args> using Delay=F<Args...>;
5.	표준라이브러리의 traits(특성정보)를 통해 어떤 객체에 대해 멤버 없이도 value_type, difference_type등을 논할 수있다는 장점이 있지만, 구현세부사항을 사용자에게 노출한다는 단점도 있다. 고로 별칭으로 은닉시키는 동시에 사용도 편리하게 한다. 이러한 타입정보는 일반화프로그래밍이나 메타프로그래밍에 필요한 이름을 비침습적으로 추가하기 위해 필수적이다.
6.	Conditional, Select를 통해 여러 항목중에서 선택(if)를 할 수 있다. 통상적인 if를 쓰면 Type에 대한 scope문제가 발생한다. 예외로 My_cond<T>)_?Square{}(99):Cube{}(99);은 작동하지만 그냥 Conditional<(My_cond<T>()), Square, Cube>{}(99);을 사용하는 것이 읽기 좋다. 반복은 재귀와 stop condition의 specialization으로 구현가능하다.
7.	여러 타입중에서 선택하는 경우 특수화를 이용하여 노가다로 할 수 있지만, 만약 존재하지 않는 대안을 선택하면 오류가 아닌 기본템플릿이 사용되는 결과가 발생한다. 고로 가변인자템플릿을 통해 범용적인 select가 가능하며 구현이 궁금하면 metaprogramming.cpp를 참고하자. Select<2, int, double, char> x;//char
8.	조건부 정의를 위해 Enable_if가 사용된다. template<typename U=T>	Enable_if<Is_class<T>(),T>* operator->();//SFINAE활성화 후 클래스에 대해서만 멤버를 선택. SFINAE덕에 조건이 false라면 그것이 포함된 전체 함수 선언이 완전히 무시된다. 
	Enable_if을 이용하면 false시 오류 탐지와 보고를 구현에서 선언으로 이동시킬 수 있다. 이는 큰 차이이며 이런 의미에서 Enable_if를 콘셉트의 변형으로 좀 더 정확한 명세를 가능하게 해준다.
9.	Enable_if는 생성자 타입 안에도 적용할 수 있으며, 이는 템플릿 함수에 대해서만 통한다. 즉 클래스나 변수, 템플릿이 아닌 함수선언 제어에는 사용이 불가능하다. 콘셉트에 대한 언어 지원이 부족하다면 Enable_if로 대신 구현할 수 있지만 Enable_if는 타입 인자가 제공되지 않으면 void로 해결된다는 것을 인지해야 한다.
	다만 항상 표준화된 오버로딩 규칙, 특수화 규칙을 따라서 난잡하게 만들지 않는 것이 중요하다.
10.	Tuple을 파생 클래스의 '스택'으로 정의한 방식은 Tuple의 첫 원소가 가장 높은 주소를 얻고 마지막 원소가 전체 Tuple과 동일한 주소를 갖게되는 특징을 갖는데, 이는 흥미로운 최적화(empty-base optimization 등)의 가능성을 열어주어 sizeof(T0)==8, sizeof(T1)==4, sizeof(T2)==4와 같은 결과를 얻을 수 있다.(Tuple의 []연산자를 오버로딩하여 get<2>(x)처럼 사용하지 않으려고 시도하면 안됌..별도로 처리해야함..)
	auto xxx=make_tuple(1.2, 3, 'x', 1223);처럼 make_tuple로 인자타입 암시적추론기능을 사용할 수 있다.
11.	Variadic template argument로 printf의 취약점을 보완하는 등 쓸 수 있지만, type check가 안되기에 항상 사용시 predicate로 type check을 해주어 일관적인 작업처리를 유도하는 것이 현명하다. template parameter pack이나 function parameter pack은 class X: public Bases...{처럼 기반클래스에도 사용이 가능하다.(feat. sizeof...)
12.	가변인자 템플릿의 주요 용도 중 하나는 한 함수에서 다른 함수로 포워딩하는 것으로 다음과 같다. template<typename F, typename... T>	void call(F&& f, T&&... t){	f(forward<T>(t)...);	}
13.	리터럴 연산자 오버로딩 시 정수리터럴을 제공한다고 하면 unsigned long long 에 대한 접미사까지 다 정의해야 잘 작동한다. Unit SI..
14.	템플릿 별칭을 타입반환하는 타입함수에 대한 인터페이스로, constexpr함수를 값을 반환하는 타입함수에 대한 인터페이스로 활용하자. 모든 경우에 variadic을 사용하는 것이 아니라 균일한 타입이라면 initialize_list를 사용하자. 포워딩에는 variadic과 std::move를 사용하자.