	[STL 알고리즘]
1.	표준 라이브러리 알고리즘은 설계시 STL의 이동의미구조에 대한 지원이 없었기에 반복자를 반환하는데, 이는 새 container를 반환하여 해결이 가능하다(by ex. vactor<Value_type<Cont>*>)
2.	지정되지 않는 한 알고리즘에 전달되는 정책인자(Predicate)는 원소를 변경하지 않아야 하며 사용이 필요하다면 const를 붙여 보호해야한다(or for_each이용.). 또한 predicate는 연산의 의미를 변경하는 상태를 보유하지 않아야 한다.(포인터 원소에 대한 ==와 <은 STL에 거의모두 옮지 않다)
3.	sequence predicate로는 transform()_입력 항상 바꾸진 않음, move_backward(), unique()_중복원소없이 이동 but 컨테이너 종류 모르기에 우리가 기대하는 방식이 아닐 수도 있기에 명시적으로 erase사용하는 컨테이너로 변경해야함, 
	remove()_몇몇 algorithm들은 input sequence의 size변경이 불가하여 크기가 변경 안될 수도 있음+원소를 뒤끝으로 이동시켜 제거, rotate()_by using swap, , partition(), partition_point(), is_partitioned(), nth_element(b,n,e)_n은 정렬해도 현재위치
4.	표준 list는 Random Access Iterator가 없기에 필요시 vector로 복사해서 다시 list로 옮겨야 한다. 또한 STL 알고리즘은 ==가 아니라 동등성 비교인 !(a<b)&&!(a>b)  == !((a<b)||(a>b))을 사용한다는 것을 유의하자.

	[STL 반복자]
1.	반복자의 카테고리(concept)로는 input iterator, output iterator, forward iterator, bidirectional iterator, random-access iterator로 크게 5가지가 있다.
2.	<iterator>의 반복자 특성 정보 iterator_traits<>, input_iterator_tag, output_iterator_tag, forward_iterator_tag, bidirectional_iterator_tag, random_access_iterator_tag를 사용할 수 있다. 이들을 사용하는 코드들은 tag dispatch기법으로 inline화 될 것이다.
	반복자를 인자로 받는 코드에 typename iterator_traits<Iter>::value_type 혹은 ::reference_type처럼 iterator_traits를 사용하여 구현하며 pointer 입력 시에도 정상적으로 거를 수 있다. 
	이를 이용하여 두 반복자 사이의 차이에 대한 타입을 알고 싶을 때 (실제로는 별칭사용) typename std::iteator_traits<Iter>::difference_type<Iter> d4=distance(p,q) 혹은 auto d5=distance(p,q)를 사용하면 된다.
3.	유용한 반복자 타입을 생성할 수 있는 iterator adaptor로는 reverse_iterator, back_insert_iterator, front_insert_iterator, insert_iterator, move_iterator, raw_storage_iterator가 있다.
4.	삽입 반복자로는 insert_iterator, front_insert_iterator, back_insert_iterator가 있으며 각각 insert(), push_front(), push_back()을 사용하여 삽입한다. 이들은 다음과 같은 삽입자 생성 함수를 통해 생성된다. inserter(), back_inserter(), front_inserter() 이들은 컨테이너의 반복자여야 한다.
5.	이동 삽입자(복사가 아닌 이동)은 이동 반복자 생성 함수 make_move_iterator을 이용하여 만들어진다. ex. copy(make_move_iterator(vs2.begin()), make_move_iterator(vs.end()), back_inserter(vs3));
6.	<iterator> begin()과 end()이 자동적으로 사용자 정의 컨테이너에 획득되기에, 직접 커스텀 한 멤버 버전을 사용하고싶으면 Iterator<My_container<T>> begin(My_container<T>& c) { return Iterator<My_container<T>>{&c[0]; }; }과 같이 오버로딩해야한다.
7.	<functional>에서 주로 사용되는 predicate들을 제공한다. 산술연산도 마찬가지이다. functional adaptor는 함수인자를 받아들이고 원래 함수를 실행시키는 함수 객체를 반환한다. bind(f, args), mem_fn(f), not1(f), not2(f)등이 있다. bind와 mem_fn은 Currying이나 partial evaluation라고 불리는 argument binding을 수행한다.
	유의해야하는 점은 bind에 참조자를 쓸 경우에 참조자를 접하기 전에 참조자가 역참조되기에 지역사본을 다룰 수 있다. 이를 해결하기 위해선 reference_wrapper인 ref()를 사용하여 해당 bind function을 사용하면 된다.
8.	mem_fn은 비멤버 함수로 호출될 수 있는 functor을 만들어낸다. 즉 멤버를 비맴버객체로 변환할 수 있다. 이는 객체지향적인 호출 스타일에서 함수형 스타일로의 매핑으로 보기도 한다. 근데 대부분 람다로 대체 가능하다. mem_fn을 통해 p->f(a)호출규약을 f(p,a)로 바꿀 수 있다.

	[메모리와 자원]
1.	일반적인 배열과 std::array의 차이점은 포인터로의 암시적인 변환을 막아준다는 것이다.
2.	bitset을 이용하거나 일반 set, enum, bitfield, vector<bool>등을 이용하여 비트정보표현이 가능하나, bitset<N>은 N비트를 가진 배열로 고정된 크기를 가지며 정수에 의해 색인되며 비트를 조작하는 연산(set(),reset(),bs2=~bs ..etc)을 제공한다.(다만 기본제공포인터로 단일비트 직접 주소지정은 불가능. 오로지 참조자(프락시)로만)
	유의할 점은 논리시프트만 되며, size_t를 사용하기에 음수 shift는 불가능하다. to_ullong()이나 to_string을 통하여 타 타입으로 변환이 가능하다. 다만 출력을 위한 string변환이라면 그냥 bitset출력 연산자를 직접적으로 이용하면 8비트크기를 가정하기에 좀 더 읽기 편하다.(p.s bitset이 이용하는 array는 낮은index가 높은 주소를 갖는 반면, vector<bool>은 높은 주소가 높은 index를 갖는다)
3.	pair사용 시 first와 second를 다른 tuple에서 갖고오고 싶다면 pair<T,U> p{piecewise_construct, t, t2}을 사용하는데, piecewise_construct는 piecewise_construct_t타입객체의 이름으로 tuple멤버를 가진 pair생성과 first와 second에 대한 인자리스트로 tuple을 사용하여 pair생성을 구분하기 위해 사용한다.
4.	tuple은 explicit생성자를 이용하여 사용할 수 있는데, tie(args)_좌변, forward_as_tuple(args)_우변등 여러 tuple<Types...>보조 함수들이 존재한다.
7.	메모리를 반환하고 해제하는 방식으로 직접 할당자를 만들 수 있고, 할당하는 객체가 실제로 상태를 가진경우에만 컨테이너 공간 오버헤드를 유발하는데 이는 비어있는 기반 클래스 최적화(EBCO)를 이용해 달성한다.
	allocator는 포인터의 속성과 프락시 타입을 판별하기 위해 pointer_traits를 사용한다. 이는 allocator_traits와 유사하게 꼼수를 통해 default value를 이용한다.
8.	Your_allocator를 사용하는 Your_string과 My_allocator을 사용하는 My_vector를 이용하여 My_vector<Your_string>같이 종합된 버전을 만들때 유효범위를 가진 할당자를 이용하며 외부의 할당자와 내부의 할당자를 추적 관리하는 메커니즘을 제공하는 scoped_allocator_adpator클래스등을 이용한다. 메모리와 관련된 심각한 성능상의 제약조건이 있을때 직접 제작하여 사용한다.
9.	GC는 비메모리 자원을 다룰 순 없지만 메모리의 재확보/재사용을 가능케 하며 누출 시칸을 상당히 늘릴 수 있고, 누출의 원인을 찾는 도구로도 사용된다.
10.	GC 열거자는 다음과 같다. relaxed_안전하게 파생된 포인터나 그것을 가리키는 traceable 포인터가 아닌 모든 객체를 수집, preferred_relaxed와 비슷하지만 누출탐지기나 부적절한 포인터의 역참조탐지기로 실행, strict_안전하게 파생되지 않은 포인터들을 무시.
11.	<memory>에서 allocator외에도 미초기화 메모리를 다루기위해 fill*계열 함수를 제공하는데, 초기화,소멸시키지 않는 임시버퍼의 할당과 할당해제에 사용된다. 즉 이들은 저수준이기에 new나 allocator::allocate()의 대안으로 사용하지 않는다.
	임시버퍼외에도 시퀸스멤버가 초기화돼있다고 가정하는 표준 알고리즘의 즉시적인 대상으로 미초기화 메모리를 사용할 수 없기에 대입대신 초기화를 하는 <memory>의 raw_storage_buffer을 사용할 수 있다. 이 경우들을 제외하곤 사용하지 않는다..
	
	[유틸리티]
1.	<chrono> duration의 period는 단위체계UNIT이기에 일반적인 =나 +=의 사용은 불가하다. 고로 명시적으로 UNIT을 제공해야만 사칙연산등이 가능하다. <ratio>에서 SI단위를 이용 duration관련 편리한 별칭들을 제공한다.
2.	time_point는 clock으로 측정되는 주어진 기준 시간 사이에서 어떤 시점을 표현하기 위한 것으로, time_since_epoch()로 저장된 duration을 확인할 수 있다. 마찬가지로 time_point_cast<D>를 이용하여 변환이 가능하다. 시계에 접근하지 않는 단순 scalar time_point연산은 constexpr로 선언될 수 있다.
3.	clock 객체의 모든 맴버는 static이며, is_steady, now(), to_time_t(tp), from_time_t(t) 등의 멤버가 존재한다. clock의 종류로는 system_clock, steady_clock(순방향으로 일정하게_, high_resolution_clock이 있다.
4.	<chrono>의 구현에 사용되는 time traits으로는 zero(), min(), max(), common_type<duration<R1,P1>, duration<R2,P2>>::type등이 있다. common_type을 갖는 조건은 두 time_point가 공통된 clock type을 가져야 한다.
6.	<type_traits>에서 primary type predicate을 제공한다. 다음과 같은 함수로 ::value접근의 수고를 덜 수 있다. constexpr bool Is_floating_point(){ return std::is_floating_point<T>::value; }
7.	composite type predicate로는 is_reference<X>, is_scalar<X>, is_compound<X>등이 제공되며, type property predicate로는 is_const<X>, is_volitile<X>, is_trivial<X>, is_standard_layout<X>, is_polymorphic<X>, is_constructible<X, args>등이 제공된다.
8.	위의 타입 속성 술어함수(type property predicate)들은 사용경우별(Derived..) 접근체크를 수행하지 않지만, 멤버와 프렌드 외부에서의 사용에 대해 기대하는 결과를 제공한다.(그냥 derived같은거빼고 정상작동한다는 소리)
	is_trivally계열(is_trivally_move_constructible<X>) 함수들은 간단한 연산만으로 실행이 가능한지를 묻는 것으로 최적화에 사용하기도 하며, is_nothrow계열(is_nothrow_desstructible<X>) 함수들도 있다. 또한 type property question으로 alignment_of<X>_alignof<X>, rank<X>_배열이라면 차원의 개수, extent<X,N>_배열이라면 N차원에 있는 원소의 개수 등이 있다.
9.	type relation으로는 is_same<X,Y>_같은타입인지, is_base_of<X,Y>_X가 Y의 기반클래스인지, is_convertible<X,Y>_암시적으로 변환될 수 있는지 등이 있다.
10.	타 타입으로 어떤 타입을 생성하기 위한 타입함수로 const&volatile(remove_const<X>), 참조자(remove_reference<X>), 부호(make_unsigned<X>), 배열(remove_extent<X>), 포인터(remove_pointer), 정렬(aligned_storage<n>), 기타 변환(common_type<X>)등을 지원한다. declval<T>는 T에 대한 우변 값을 반환하며 이 값은 절대 사용하지 않는다.
11.	소규모 유틸리티로 move()_우변값 캐스트(이동되어 빈객체가능성), forward()_우변값으로 우변값생성(빈객체가능성X_perfect forwarding에 사용), swap()이 있다.
12. <utility>의 부분 네임스페이스 rel_ops에서 임의의 타입에 대한 관계연산자(!=, >, <=, >=등)을 찾을 수 있다. using namespace std::rel_ops를 통해 활성화가 가능하다. using을 사용하면 항상 의도치 않은 ADL가능성을 주의하자
13.	<typeindex>에서 type_index의 비교,해싱을 지원한다. type_index는 이를 가능하게 하기 위해 type_info에서 생성된다.