	[행렬 설계]
1.	간단한 slice는 원소위치(색인)으로의 매핑을 '첫 번째 색인', '포함된 색인의 개수(범위 체크에 사용)', '시퀸스에서 원소 사이의 거리' 세가지 값의 관점이서 기술한다. (p.s slice는 표준 라이브러리버전이 존재한다)
2.	Matrix와 Matrix_ref는 닮았기에 중복문제가 일어날 수 있는데, 그럴경우 둘 모두를 공통 기반 클래스에서 파생하여 해결할 수 있다. Matrix_base
3.	1차 방정식을 해결하기 위해서는 우선 계수들을 nxn 정방 행렬로 만든다. 그 뒤 가우스소거법을 사용하는데, 대각선 아래의 계수가 0이 되는 상 삼각을 이용한 상 삼각행렬로 변환한다. 그 후 back substitution을 통해 찾을 수 있다.
4.	성능을 매우 신경쓴다면 병합 연산 시 지역변수에 할당된 원소들이 한곳에 모이는 문제 즉 루프 병합(loop fusion)이 발생한다. 하지만 이는 그냥둬도 된다..민감한거아니면. 이를 해결하기 위해서는 평가지연을 통해 시간을 낭낭히 받으면 되는데, 이때 생성되는 객체를 composition closure objects또는 compositor라고 부른다. 
	이러한 기법이 모든 연산의 실행을 지연시키기 위해 사용된다면 expression template이라고 부르며, 이를 통해 functor를 체계적으로 이용하기에 표현식을 Abstract Syntax Tree(AST)라고도 부른다.
	
	[표준 라이브러리 개요]
1.	<typeindex> type_info를 키나 해시코드로 사용, <scoped_allocator> 유효 범위를 가진 할당자, <cstdlib> bsearch() qsort(), <cassert> 단정 매크로, <cerrno> C 스타일 오류 처리, <system_error> 시스템 오류 지원 (<cstddef> sizeof반환타입, ptrdiff_t, NULL 매크로)
2.	<cctype> 문자 분류, <cwctype> 와이드 문자 분류, <cstdlib> C 스타일 할당 함수, <impanip> 조작자(스트림의 상태 조작), <codecvt> 코드 변환 패싯(facet), <cstdarg> 가변 길이 함수 인자 리스트, <csetjmp> C 스타일 스택 풀기, <csignal> C 스타일 신호 처리
3.	<cstdbool> C bool(bool, true, false매크로 X), <cfenv> 부동소수점 환경(부동소수점 상태 플래그 및 구현의 부동소수점 환경 기술 제어모드 제공)
4.	iterator로 접근을 하는 initializer_list에 []를 사용하고 싶다면 iterator.begin()[i]처럼 사용하라.(==*begin()+i)
7.	nested_exception으로 예외 핸들러가 호출을 일으킨 예외를 가리킨 exception_ptr과 함께 오류의 지역적 맥락을 전달하기 위해 사용하는 클래스에 대한 기반 클래스로서 사용된다. nested_exception ne{}는 current_exception()에 대한 exception_ptr을 보관한다.(p.s throw_with_nested(e), rethrow_if_nested(e))
8.	noexcept위반의 결과로 terminate()가 호출되면 스택이 부분적으로 풀리지 않을 수 있다는 점을 의미하는 중요한 최적화가 시스템에 허용된다. (uncaught_exception는 최초의 예외가 잡힌 이후의 스택 풀기 도중에도 참이기에 지양하자)
9.	assert는 false일시 cerr에 메시지를 쓰고 abort()한다. 다만 NDEBUG가 정의되어 있으면 아무것도 하지 않는다. 즉, assert()가 항상 평가된다고 가정하지 않는다.
10.	<system_error>에서는 운영체제와 하위 시스템 구성 요소에서 발생한 오류를 알려주기 위한 프레임워크를 제공하는데 오류코드분류기능, 시스템오류코드의 이식성 향상, 오류코드를 예외로 매핑시킨다.(feat. error_code, error_category, error_condition, errc, future_errc, io_errc)
	오류가 저수준에서 일어날 시 오류코드를 처리하거나 예외로 바꿔야 하는데 시스템별로 코드가 다를 수 있으니 error_category를 이용, 오류코드를 분류(cat.equivalent(n,ec)사용하여 분류, 값 판단)한다. (참고 error_condition 작은 정보를 가지기에 ec의 정보를 추출에 사용)
	error_category의 종류로는 generic_category(), system_category(), future_category(), iostream_category()가 있다. future_category()는 enum class future_errc에, iostream_category()는 enum class io_errc에 정의되어 있다.
11.	최소하나의 error_condition으로 error_category를 만드는 것을 원하는 error_code들로 enum을 정의하는 것에서 오류코드 매핑이 시작한다. 그 뒤 적절한 카테고리를 만들고, 코드별 메시지 매핑되는 함수를 만들고 사용한다.
12.	errc오류코드는 <cerno>의 POSIX파생항목과 같은 값을 가지는 enum class errc에 정의된다. 이는 system_category()에 유효하며 POSIX와 유사한 기능을 지원하는 시스템에 한해 generic_category()에서도 유효하다. errc열거자는 errc타입인 반면 POSIX매크로는 정수하는 차이가 있다.

	[STL 컨테이너]
1.	sequence conatiner와 associative container외에도 원소를 보관할 수 있는 객체 타입을 제공하는데 다른 컨테이너에 대한 특수화된 인터페이스를 갖는 container adaptor(stack, queue, priority_queue)와 컨테이너 기능 대부분을 제공하는 almost container(string, array<T,N>, valarray<T>, biset<N>, vector<bool>)가 있다.
2.	순서 정렬의 기준은 strict weak ordering을 정의해야하는데, 비재귀성(xx) 반대칭성(xyyx) 추이성(xyz) 동등성의추이성(xy !(xy||yx))을 만족해야한다. 여기서 특별히 ==가 동등성 검사 시 !(cmp(x,y)||cmp)y,x)) 즉 동등성의 추이성을 만족한다면 이를 total order라고 부른다.
3.	O(n)+는 관용적으로 amortized linear time으로 부르며 평균속도 상수, 극히 드문 최악은 선형시간 이라는 뜻이다.
5.	iterator무효화에 대해선 associate conatiner는 erase()시, sequence container는 element의 위치가 바뀌거나 이동되면 무효화된다. 무효화방지가 중요한 경우, reserve()를 사용하기도 한다.
8.	리스트(list<T>, forward_list<T>)연산 splice(p, lst)는 lst원소를 p앞에 삽입하는 것이며, lst는 비워진다. 원소 값 복사 없이 원소에 대한 반복자를 무효화하지 않는다
10.	insert, emplace시 반환값은 non-multi의 경우 pair(p,b)가 되며, multi이 경우 iterator값이 된다.
12.	동일한 해시값을 가진 키는 동일한 버킷 안에 있다고 불리운다. unordered associative container의 load factor(부하율)은 사용된 용량의 비율로 대부분 70%가 적당한 선택이다.
	버킷 인터페이스로 bucket_count(), max_bucket_count(), bucket_size(n), bucket(k)등이 있다. 이들을 통해 해시 함수에 대한 실험을 가능하게 해줄 뿐이지 max_bucket_count()를 index of bucket으로 사용하는 것은 정의되어 있지 않다.
13.	container adaptor를 만들기 위해 사용되는 기법은 사용자의 요구에 맞춰 클라이언트 인터페이스를 비침습적으로 조정하는데에 있다.