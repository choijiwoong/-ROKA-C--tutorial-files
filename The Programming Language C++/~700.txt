	[특수 연산자]
1.	operator[](), operator()()는 non-static 멤버 함수여야 한다.
2.	전후위 연산자 오버로딩시 기본적으로 ptr+1을 가리킬 수 있는지 체크하는 부분, 후위를 생략하고 전위만 구현하는 것이 효율적이다.
5.	template literal operator은 여러 개의 템플릿 매개변수를 인자로 받아들이는 리터럴 연산자이다. 즉, 리터럴 연산자 오버로딩 시 template argument가 가용한 것이다.
6.	템플릿 인자에 friend를 이용할 수도 있다(friend T). friend는 소속된 유효 범위 내에서 명시적으로 선언되거나, 그것으로부터 파생된 클래스의 인자를 받아들여야 한다(Argument-Dependent Lookup) 주로 이항 연산자에서 사용된다.

	[파생 클래스]
3.	enum을 이용하여 클래스 내 타입필드를 만드는 것은 컴파일러가 체크할 수 없는 방식으로 타입을 조작한다는 근본적인 취약성(유지보수too)이 존재한다.
5.	재정의 관련하여 contextual keyword; final같은 제어장치를 사용할 수 있다.  Type type() override final;_파생&재정의 금지.
6.	아래와 같이 하면 Vector가 std::vector로부터 아무 생성자도 상속받지 못한다. using std::vector<T>::vector을 통해 명시적으로 생성자를 상속한다고 표현해야한다.
7.	convatiant return rule은 포인터나 참조자인 반환타입에 대하여 Derived->Based선에서 변경이 가능하다는 것이다.(feat, contravariance)
8.	access modifier을 나누어서 정의하는 것은 multi threading convironment에서 rearrage가능성이 있다. protected를 사용해야한다면 차라리 private로선언된 공통된 데이터 클래스를 갖는 것이 좋다. protected는 주로 파생 클래스에서 사용될 연산을 지정하는데에 사용된다.
12.	클래스의 static 멤버를 가리키는 포인터는 통상적인 포인터일 뿐이다.

	[클래스 계층 구조(class hierachy)]
3.	추상 클래스 설계에는 거의 모든 사용자 코드가 구현에 가해진 변경에서 보호되며(상속되는 것이 없기에. 사용자는 단순히 abstract class의 메소드만 이용한다.), 그런 변경 후에도 재컴파일을 요구하지 않는다.
	동일한 이름의 클래스를 상속받는 경우 하나를 구분을 위해const함수로 바꾸는 것도 나쁘지 않다.
5. 	인터페이스(추상클래스)의 다형상속과 복사상속의 논리적인 차이는 복제된 설계에서는 모호성때문에 상위클래스로 암시적 변환이 불가능 하다는 것이다.p. 698의 계층도 참고. 근데 그냥 팩토리함수(내부적해결) 만들거나 가상생성자(알아서사용)쓰면 문제 해결됨.
9.	하나의 window를 공유하는 두 class에서 각기 재정의를 한다면, 해당 window라는 인터페이스의 일관성이 사라지기에 그러한 virtual상황에서의 각자 override는 Mixin클래스로 두 클래스를 상속받아 모든것(각자의 override)를 한번에 재정의하여 override해야한다.
	이렇게 가상 기반 클래스에 대한 구현의 일부를 제공하는 클래스를 종종 Mixin클래스라고 불린다.