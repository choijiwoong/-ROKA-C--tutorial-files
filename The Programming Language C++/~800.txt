	[런타임 타입 정보]
1.	런타임타입조사(Run-Time Type Information(RTTI)) 연산은 casting이며, 유효한포인터나 nullptr(혹은 throw)을 반환한다(즉, dynamic_cast<T*>(p)는 p가 가리키는 객체가 존재한다면 T타입인가?와 동일. dynamic_cast<T&>(r)은 <T*>와 달리 질문이 아닌 단정이다)
2.	비다형적 객체에는 다형적정보가 없기에 포인터&레퍼런스에 dynamic_cast시 정확한 타입을 모를 경우 안전한 조작이 불가능하다. (void*로의 dynamic_cast는 오로지 다형적 타입 객체의 시작 주소를 판변하는데에 사용)
4.	dynamic_cast와 static_cast는 모두 const와 access modifier를 침해하지 않기에 static_cast나 reinterpret_cast로 private기반 클래스를 캐스팅하는것은 가능하지 않므며, const_cast로 const를 없앤다하더라도 객체 내부에 멤버가 const면 해당 내용은 여전히 사용이 불가하다.
5.	기반 클래스의 종류를 정확히 알기위해 typeid()를 사용하는데, 일반적으로 연결된 데이터 구조를 송신하고 여러 개의 포인터가 가리키는 객체의 중복을 피하기 위해서는 (pointerm, id)쌍의 테이블까지 보관한다.
6.	Dynamic Dispatch는 두 가상함수중 선택하는 것이며, Double Dispatch는 두 타입을 기반으로 가상함수를 선택하는 방법, Visitor는 이중 디스패치를 이용하여 계층 구조에 단 하나의 가상함수만 추가하면서 여러개의 함수를 클래스 계층 구조에 추가하는 방법이 있다.
	intersect상황에서 double dispatch를 이용하면 intersect여부에 관계없이 s1에 적합한 가상함수를 호출하고, s2에 적합한 함수를 호출하는 것이다. 해결은 모든 조합을 다 함수로 만들거나, bounding box로 하나의 function으로 처리하며 intersect를 ck하거나, search_table을 미리 정의할 수 있다.
	intersect상황에서 visitor을 이용하여 균일한 데이터 구조(일반화)에 의한 명시적 반복 수행을 기반으로, 다양한 타입의 다중 노드에 대한 접근을 필요로 하는 연산을 주로 간단히 구현할 수 있다.
	(p.s 객체의 행위를 외부로빼서 객체의 행위를 위임하는 패턴으로 전략패턴(1:N), 커맨드 패턴(1:1), 비지터 패턴(N:N)이 있다.)
7.	생성이나 소멸 도중에 virtual함수를 호출하게 된다면 지금까지 생성된 것만이 동적타입이 반영되기 때문에 한참 Based의 기반 클래스만 생성되었다고 가정하고 virtual을 call할 수 있다. 고로 생성&소멸중엔 virtual함수를 호출하지 말아야 한다.
8.	<typeinfo>의 typeid()에 피연산자로 완전히 정의된 타입의 이름이 주어지면 해당 type_info에 대한 reference를 반환한다. (expr이 nullptr이라면 std::bad_typeif exception을 throw한다)_피연산자가 포인터라면 *로 값을 참조해야한다. else, pointer의 typeid

	[템플릿]_template<typename T> class D: public B<T>{}
2.	C++은 템플릿 인자에 대한 요구사항을 직접 표현할 수 없기에(와일드카드 in JAVA) 그러한 요구사항의 집합을 콘셉트(concept)라고 부른다. 다만 낮은 수준의 추상화를 느리게 수행한다.
3.	템플릿 인자의 오류탐지는 인스턴스화시점에 시작되지만, 일부는 링크될때까지 체크를 연기하므로 완전한 체크가 가능한 시점은 링크타임이다.
5.	friend관계는 상속되지도 않고, 추이적(transtive)이지도 않다. 참고로 Link<X>가 오직 List<X>의 프렌드여야 한다라고 기술할 수 있는 방법은 존재하지 않는다.
6.	클래스 템플릿의 매개변수처럼 추론되지 않는 것들은 템플릿 매개변수를 명시적으로 지정해야한다. template<typename T> T* create(); 		int* q=create();//ERROR
8.	함수템플릿 오버로딩규칙중 가장 특수화된 템플릿함수를 고른다에 이어 통상적인 함수의 오버로딩 규칙 적용단계에 이르게 되면 템플릿 매개변수가 고유하게 결정되기 전까지는 타입 승격과 표준 변환을 적용하지 않는다는 문제가 있다. 고로 명시적한정<type>으로 해결)하거나 inline타입변환 함수를 만들어 바로 적용하게 하여 해결할 수 있다.
10.	inline이 아닌 non-template function들과 static멤버들은 일부 컴파일 단위에서 고유 정의를 가져야하는데, 많은 해석 단위에 포함될 가능성이 있는 템플릿은 쓰지 않는 것이 좋다는 것이다. 많약 쓰게 되면 구현에서 잡아낼 수없는 오류가 발생될 수 있다. 만약 불가피하다면 명시적 인스턴스화나 extern template(한번만 인스턴스화되게)을 사용하자.
11.	최적의 방법은 복잡한 템플릿 라이브러리를 비템플릿 인터페이스로 캡슐화하여 라이브러리 변경의 노출을 최소화하는 것이다. ex. double accum(const vector<double>& v); 템플릿이 없는 선언! 알아서 내부에서 추론한다. 다만 복잡성의 근원이 될 수 있기에 표준라이브러리 구현에는 사용하지 않는것을권장하지만, 더 복잡하며 자주 변경된다면 유용하다.
12. 클래스 템플릿을 복사가능하게하려면 비템플릿 복사 생성자와 비템플릿 복사 대입 생성자를 만들어야 한다. 또한 템플릿 설계시 템플릿 인자에 대해 가정된 콘셉트(tmp인자 요구사항)를 신중하게 고려해야 한다.
13. 일반화 프로그래밍에서 주요한 두가지 요소는 lifting_알고리즘을 범용화(용도훼손X선에서 알고리즘화), concept_요구사항을 신중하고 정확하게 가정 for 물리적 세계와의 plug compatibility with other concepts 이다.
14.	concept설계시 우리의 요구사항 리스트(concept들)가 잘 알려진 콘셉트(regular type)와 관련되는지를 볼 수 있는데, regular type이란 적절한 복사의미구조로 복사가 가능하며, default constructor가 있고, 사소한 기술적 요구사항과 문제가 없으며, 동등성을 비교할 수 있는것을 의미한다.(concept집합을 파다보면 regular을 정의하게 된다)
	콘셉트, 타입임시적인 제약조건의 집합의 판단은 '대강이라고 의미 구조를 기술할 수 있는가?'이다. 콘셉트는 constexpr 술어함수이며 constraint check이라는 용어는 이러한 술어함수를 가리키지만, 실제적인 뜻은 concept와 다르게 의미구조이슈를 다루지 않으며 단순한 문법적 속성에 대한 가정을 체크하는 것이다.
15.	제약조건체크 템플릿을 통해 콘셉트를 체크하는 방법(concept example의 Totally_ordered로 concept체크하는 방법)에는 명백한 취약점이 있는데, 제약조건체크가 실제 정의에 속하지 않으며, 인스턴스화과정의 일부로 늦은 체크의 가능성이 있으며, 우리가 제약조건체크삽입을 잊을 수 있고, 
	컴파일러가 우리가 정한 콘셉트만 사용하는지 모르기에 제약조건체크성공후에도 타입체크실패가능성이 있으며, 우리가 컴파일러가 이해할 수 있는 의미구조속성을 지정하지 않기 때문이다. (axiom(공리)는 우리가 증명할 수 없는 그 무엇으로 위와같은 상황에서는 의미 구조 속성을 언급하는 뜻으로 그냥 테스트 전 가정(우리가 뭘 기대하고 이 콘셉트를 만드는지)이며, 설계도구와 테스트 지침으로 활용한다.)
	다중인자 콘셉트(template argument여러개), 값 콘셉트(값을 비교하여 bool 반환)등이 있다. 구현콘셉트에 의해 지정된 속성을 제공하는 인자들을 archetype(전형)이라고 부른다.
17.	concept에 기존 타입과 같이 필요 이상의 범용적인 것을 선택하게 되면 제대로된 test가 불가하다. 작은게 유지보수도 유리하다

	[특수화]
1.	템플릿이 받아들이는 인자는 type parameter, value parameter, template parameter로 템플릿 인자에 typename이나 class접두사를 붙이면 정의되는 것이 type parameter이다. value argument는 통합정수상수표현식, 외부링크관계의 함수 또는 객체에 대한 포인터또는 참조자, 멤버를 가리키는 오버로딩되지 않은 포인터, 널 포인터가 될 수 있다.
	문자열 리터럴은 template parameter이기에 value parameter로 받을 수 없다. 참고로 value template parameter는 const이기에 변경하려하면 오류가 발생한다. type template parameter는 다음과 같이 사용될 수 있다. template<typename T, T default_value>, template<typename T, T default_value=T{}>
2.	template patameter로 인해 type에 의존하는 cmp callable이라건가, map이라던가에 유용하다. template<typename Key, typename V, bool(*cmp)(const Key&, const Key&)> class map{}//템플릿 값 인자	template<typename Key, typename V, typename Compare=std::less<Key>> class map{}//템플릿 타입 인자
	첫번예시처럼 functor로 비교연산을 전달하면 포인터로 함수를 가리키는 것 보다 쉽게 인라인화가 가능하며, 멤버없는 functor는 런타임비용이 없으며, 여러 연산을 단일 객체로 전달해도 추가적인 런타임 비용이 들지 않는다. 다만 람다는 functor로의 변환이 불가능하기에 아래처럼 이름을 붙인 람다만 가능하다.
	auto cmp=[](const string& x, const string& y) const {return x<y;}	map<string, int, decltype(cmp)> c4{cmp};
4.	모든 함수 템플릿 인자가 기본 설정(argument에 default value 모두set)되어있다면 <>을 생략할 수 있다.
5.	특수화(user-defined specialization, user specialization)은 런타임 다형적 동작을 보존하기 위해 사용된다. <>는 template parameter없이 지정될 수 있는 특수화라는 의미이다. ex. template<> class Vector<void*d>{}//포인터에 대해 특수화. 이는 complete specialzation이라고 한다. template<typename T> class Vector<T*>처럼도 가능하다.
	template argument가 포함된 패턴을 가지는 특수화는 complete specialization(void*)과 비교하여 partial specialization이라고 부른다. 특수화는 공통 인터페이스의 다른 용도에 대한 구현 대안을 지정하는 하나의 방법이다. 
	특수화의 변형으로 여러 타입의 값에 대한 단독 런타임 표현을 사용하고 그런 타입의 값들이 선언된 타입에 따라서만 쓰일 수있도록 보장하기 위해 정적 타입 체계에 의존하는 기법을 type erasure라고 부른다. 즉, 컴파일타임에서만 타입제약조건을 체크하고 런타임시에는 타입을 제거한다는 말이다.
6.	특정 집합의 템플릿 인자에 대한 클래스 템플릿을 구현하는 방법을 구현 특수화라고 하는데 다음과 같다. class Matrix<T,0> class Matrix<T,1>, class Matrix<T,2>