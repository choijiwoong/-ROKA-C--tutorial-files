	[수치]
2.	<climits>에서 정수 한계 매크로 CHAR_BIT, LONG_MAX, DBL_EPSILON등을 제공하며, <cmath>에서는 ceil, asin, exp, log, modf, fmod등 standard mathematical functions들을 제공한다. 영역오류의 경우 <cerrno>의 errno를 EDOM으로, 범위오류에 대해선 ERANGE로 설정하여 보고한다. 
	추가적으로 <cstdlib>에서 div, lldiv,등 추가적인 수학 함수를 제공하며, special mathmatical functions로 별도의 ISO표준이 존재하기에 assoc_laguerre(), ellint_1(), legendre()등의 함수가 <cmath>에 추가될 수 있다.
3.	수치배열 valarray의 각 operator[]는 부분집합을 반환한다. slice, gslice를 size, start, stride생성자로 생성할 수 있고, 마스크(valarray<bool>)로 첨자를 달면 mask_array를, 색인집합(valarray<size_t>)로 첨자를 달면 indirect_array를 반환한다.
	slice는 1차원 배열을 임의 차원의 행렬로 조작할 수 있게 해주는 추상개념이며, stride는 slice두 원소 사이의 거리로 시퀀스의 끝을 찾기 위해 사용된다. 이를 통해 많은 시퀀스 기술(STL iterator와 같이 사용한다거나)이 가능하다.
4.	slice_array는 슬라이스로 기술되는 배열의 부분집합을 참조할 수 있는 간단한 방법으로, valarray에 첨자를 붙여 해당 슬라이스에 대해 slice_array를 만든다.(명시적으로 바로 생성불가)
5.	gslice는 general slice로서 slice로 추출된 정보를 거의 다 포함한다. n개의 정수와 1개의 색인 사이를 매핑시켜 배열원소 주소지정에 쓰일 수 있어 두개의 (길이, 스트라이드)를 가진 gslice는 2차원 배열의 부분 배열을 기술하며, 세개의 ()쌍을 가진 gslice는 3차원 배열의 부분 배열을 기술하는 개념이다. 마찬가지로 valarray의 gslice색인으로 gslice_array가 생성된다.
6.	범용 수치 알고리즘으로 <numeric>은 accumulate, inner_product(내적(행렬곱)_주로 valarray와 같이 사용), partial_sum & adjacent_difference(서로 역, incremental change개념), iota 등을 제공한다.
7.	<random>의 난수객체 uniform random number generator, random number engine, random number engine adaptor, random number distribution 총 4개의 객체를 제공한다. 표준 엔진으로 default_random_engine, lineat_congruential_engine, mersenne_twister_engine, subtract_with_carray_engine이 있다. 
	난수 엔진 어댑터로는 discard_block_engine, independent_bits_engine, shuffle_order_engine이 있다. 난수 장치(Geiger 계수기 등..)는 random_devide의 생성자로 넣으면 된다. 
8.	C스타일 난수는 <cstdlib>에서 제공하는 표준라이브러리로 만들 수 있는데, int((double(rand())/RAND_MAX)*n)을 사용하면 보다 괜찮은 값을 얻을 수있다..고 한다...?

	[병행성]
1.	다른 활동과 병행적으로 실행될 수 있는 활동을 task라고 부르며, 스레드가 메모리에 타당한 방식으로 접근하게 보장하는 지원사항으로 memory model(병행적 접근 보장의 집합), programming without lock, thread 라이브러리, task 지원 라이브러리를 지원한다.
2.	언어 보장 집합 memory model의 이해는 메모리에 있는 객체연산을 직접적으로 수행되지 않으며, 프로세서 레지스터에 로딩되고, 수정한다음 다시 쓰여진다. 즉, 대개 객체는 메모리에서 캐시 메모리로 로딩된다음 레지스터로 로딩된다. 이들은 두 개의 실행 스레드가 서로 간섭하지 않고 별도의 메모리 위치를 갱신하고 접근할 수 있게 해준다.(두 스레드가 동시에 같은 워드 필드에 접근하면 X)
	memory location은 산술 연산 타입의 객체, 포인터, 인접한 비트필드가 모두 0이 아닌 폭을 갖는 최대길이의 시퀀스 중 하나이다.
3.	메모리에서 워드 하나의 값을 캐시로 집어넣고 이어서 레지스터에 넣는 데 오래걸릴 수도 있기에 동시에 서로 다른 스레드가 메모리 계층 구조의 서로 다른 위치에서 서로 다른 시간에 하나의 값을 볼 수 있어 혼란의 원인이 되기도 한다. 대부분의 아키텍쳐에는 3개 레벨 캐시를 사용하며, 모든 코어는 메모리를 공유한다.
	memory order는 스레드가 메모리에서 값을 볼 때 무엇을 보게 될지에 대해 프로그래머가 가정할 수 있는 것을 설명하는데 쓰이는 용어로, 가장 간단한 sequentially consistent가 있다. 또한 어떤 변수를 관찰하고 그에 따라 메모리 위치에 대한 consistent한 관점을 강제하는 연산을 atomic operation이라고 한다.
6.	동기화 연산으로는 acquire operation(해당 연산을 가장 먼저), release operation(이전의 모든 연산을 먼저), consume operation(해당 연산을 먼저, 값에 의존하지 않는 결과는 아닐수도)으로 구분한다. memory_order_release, memory_order_acquire, memory_order_consume등이 있다.
7.	atomic타입은 복사나 이동 연산이 없다. 또한 initialization은 non-atomic연산이므로 병합가능성이 있다(다만 굉장히 일어나기 어렵다. constexpr로 초기화하여 프로그램 시작 전에 경합이 일어날 수 없게 하자.)
	ABA문제는 CAS연산이 공유 객체의 변경을 감지하지 못하는 문제로, 우연히 지워진 메모리가 재사용된다면 실제로 지워졌다 생긴거기에 값이 변한거지만 값의 변경을 알아채지 못하는 문제이다. double-checked locking, hazard pointer(해제금지포인터)로 해결가능하다.
8.	원자적 타입 외에 저수준 동기화 기능으로 atomic_flag와 fance(memory barrier_프로그램을 안전한 속도로 늦춘다)가 있다. 이는 spinlock(lock반환시까지 계속 ck)과 원자적 타입, 컴퓨터 설계같은 최저 수준의 원자적 구현에 사용된다. 참고로 volatile은 동기화가 아닌 최적화방지를 위해 사용한다.

	[스레드와 태스크]
1.	스레드가 진행될 수 없는 상황을 blocked나 asleep이라고 하며, joinable, join(id같으면 불가; deadlock), detach, hardware_concurrency(동시에 진행될 수 있는 개수를 반환_운영체제, 프로세스, 코어에 따라 달라짐)등 여러 기능을 지원한다.
2.	this_thread::get_id()로 고유 식별자를 얻으며, 할당된 태스크가 없거나, 종료&이동&detach됐어야하면 id{}일 수 있다. 생성 즉시 태스크가 실행되며, 태스크를 함수 객체로 만들어, 시작준비가 될때 시작하게끔 연결할 수 있다. thread생성자는 variadic이기에 참조자 전달 시 ref()를 사용해야한다. thread의 이동은 참조하는 것을 바꿀 뿐이다.
3.	system thread가 자신의 thread보다 오래 사는 것을 방지하기 위해 thread소멸자는 해당 thread가 joinable인 경우 terminate를 호출하여 강제 종료한다. 기본적으로 thread의 소멸자는 자동적으로 join하지 않기에(for daemon thread like monitoring) thread를 자원으로 간주할 경우 RAII를 고려해야한다. 
4.	detach를 정말 사용해야한다면 smart_ptr을 이용하거나 유효 범위 내에 있는 변환을 참조하지 않는지 반드시 확인해야한다. 이는 오류탐지가 사실상 불가능하며 하이젠버그라고도 불린다.