	[C++ 둘러보기: 기초]
2.	auto를 사용하지 않는 경우 '타입을 명확하게 보여주고 싶은 경우' & '변수의 범위나 정밀도를 명확히 해야 할 필요가 있는 경우'
4.	&, *, []등의 연산자는 선언자 연산자(declarator operator)라고 불린다. T a[n], T* p, T& r, T f(A)
5.	new와 delete는 아래와 같이 오버로딩이 가능하다. 연산자이기 때문이다.
	void* operator new(size_t size){}
	void operator delete(void* adr){}
9.	예외에 대하여 컴파일 타임에 알 수 있다면 간단한 체크를 통해 컴파일 타임 오류로 이끌어내면 좋다(정적 단정 static_assert by using constexpr or with <type_trait>'s predicates)
	
	[C++ 둘러보기: 추상화 메커니즘]
1.	기본 제공 타입과 똑같이 작동하게끔 한다는 concrete type은 기본적으로 RAII를 따르게 한다.
2.	추상 클래스를 사용하는 여러 클래스들은 사용하는 범용함수(추상의) use(Container&)를 사용하므로써 use가 재컴파일될 필요가 없다는 장점이 있지만, 객체가 포인터나 참조자로만 조작되야한다는 단점 역시 수반한다.